{"ast":null,"code":"// Generated by CoffeeScript 1.9.2\n(function () {\n  var root;\n  root = typeof exports !== \"undefined\" && exports !== null ? exports : this;\n\n  root.Lethargy = function () {\n    function Lethargy(stability, sensitivity, tolerance, delay) {\n      this.stability = stability != null ? Math.abs(stability) : 8;\n      this.sensitivity = sensitivity != null ? 1 + Math.abs(sensitivity) : 100;\n      this.tolerance = tolerance != null ? 1 + Math.abs(tolerance) : 1.1;\n      this.delay = delay != null ? delay : 150;\n\n      this.lastUpDeltas = function () {\n        var i, ref, results;\n        results = [];\n\n        for (i = 1, ref = this.stability * 2; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {\n          results.push(null);\n        }\n\n        return results;\n      }.call(this);\n\n      this.lastDownDeltas = function () {\n        var i, ref, results;\n        results = [];\n\n        for (i = 1, ref = this.stability * 2; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {\n          results.push(null);\n        }\n\n        return results;\n      }.call(this);\n\n      this.deltasTimestamp = function () {\n        var i, ref, results;\n        results = [];\n\n        for (i = 1, ref = this.stability * 2; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {\n          results.push(null);\n        }\n\n        return results;\n      }.call(this);\n    }\n\n    Lethargy.prototype.check = function (e) {\n      var lastDelta;\n      e = e.originalEvent || e;\n\n      if (e.wheelDelta != null) {\n        lastDelta = e.wheelDelta;\n      } else if (e.deltaY != null) {\n        lastDelta = e.deltaY * -40;\n      } else if (e.detail != null || e.detail === 0) {\n        lastDelta = e.detail * -40;\n      }\n\n      this.deltasTimestamp.push(Date.now());\n      this.deltasTimestamp.shift();\n\n      if (lastDelta > 0) {\n        this.lastUpDeltas.push(lastDelta);\n        this.lastUpDeltas.shift();\n        return this.isInertia(1);\n      } else {\n        this.lastDownDeltas.push(lastDelta);\n        this.lastDownDeltas.shift();\n        return this.isInertia(-1);\n      }\n\n      return false;\n    };\n\n    Lethargy.prototype.isInertia = function (direction) {\n      var lastDeltas, lastDeltasNew, lastDeltasOld, newAverage, newSum, oldAverage, oldSum;\n      lastDeltas = direction === -1 ? this.lastDownDeltas : this.lastUpDeltas;\n\n      if (lastDeltas[0] === null) {\n        return direction;\n      }\n\n      if (this.deltasTimestamp[this.stability * 2 - 2] + this.delay > Date.now() && lastDeltas[0] === lastDeltas[this.stability * 2 - 1]) {\n        return false;\n      }\n\n      lastDeltasOld = lastDeltas.slice(0, this.stability);\n      lastDeltasNew = lastDeltas.slice(this.stability, this.stability * 2);\n      oldSum = lastDeltasOld.reduce(function (t, s) {\n        return t + s;\n      });\n      newSum = lastDeltasNew.reduce(function (t, s) {\n        return t + s;\n      });\n      oldAverage = oldSum / lastDeltasOld.length;\n      newAverage = newSum / lastDeltasNew.length;\n\n      if (Math.abs(oldAverage) < Math.abs(newAverage * this.tolerance) && this.sensitivity < Math.abs(newAverage)) {\n        return direction;\n      } else {\n        return false;\n      }\n    };\n\n    Lethargy.prototype.showLastUpDeltas = function () {\n      return this.lastUpDeltas;\n    };\n\n    Lethargy.prototype.showLastDownDeltas = function () {\n      return this.lastDownDeltas;\n    };\n\n    return Lethargy;\n  }();\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}