{"ast":null,"code":"'use strict';\n\nvar toString = Object.prototype.toString,\n    hasOwnProperty = Object.prototype.hasOwnProperty;\n\nmodule.exports = function (object) {\n  if (!object) return console.warn('bindAll requires at least one argument.');\n  var functions = Array.prototype.slice.call(arguments, 1);\n\n  if (functions.length === 0) {\n    for (var method in object) {\n      if (hasOwnProperty.call(object, method)) {\n        if (typeof object[method] == 'function' && toString.call(object[method]) == \"[object Function]\") {\n          functions.push(method);\n        }\n      }\n    }\n  }\n\n  for (var i = 0; i < functions.length; i++) {\n    var f = functions[i];\n    object[f] = bind(object[f], object);\n  }\n};\n/*\n    Faster bind without specific-case checking. (see https://coderwall.com/p/oi3j3w).\n    bindAll is only needed for events binding so no need to make slow fixes for constructor\n    or partial application.\n*/\n\n\nfunction bind(func, context) {\n  return function () {\n    return func.apply(context, arguments);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}