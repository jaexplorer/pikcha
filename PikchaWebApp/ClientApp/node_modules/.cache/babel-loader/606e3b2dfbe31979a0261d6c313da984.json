{"ast":null,"code":"import setAuthToken from \"../utils/setAuthToken\";\nimport axios from \"axios\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_ERRORS, SET_LOADING } from \"./types\"; // LOAD USER\n\nexport const loadUser = () => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  return async dispatch => {\n    try {\n      const res = await axios.get(\"http://localhost:5000/api/auth\");\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR\n      });\n    }\n  };\n}; // REGISTER USER\n\nexport const register = formData => async dispatch => {\n  try {\n    dispatch(setLoading());\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const res = await axios.post(\"http://localhost:5000/api/users\", formData, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    dispatch({\n      type: REGISTER_FAIL,\n      payload: err.response.data.msg\n    });\n  }\n}; // LOGIN USER\n\nexport const login = formData => async dispatch => {\n  try {\n    const res = await fetch(\"http://localhost:5000/api/auth\", {\n      method: \"POST\",\n      body: JSON.stringify(formData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: data\n    });\n    loadUser();\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: err.response.statusText\n    });\n  }\n}; // LOGOUT USER\n\nexport const logout = dispatch => dispatch({\n  type: LOGOUT\n}); // CLEAR ERRORS\n\nexport const clearErrors = dispatch => dispatch({\n  type: CLEAR_ERRORS\n}); // SET LOADING\n\nexport const setloading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["/Users/AndrewSabato/Desktop/Pikcha/Repo/PikchaWebApp/ClientApp/src/actions/auth.js"],"names":["setAuthToken","axios","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_ERRORS","SET_LOADING","loadUser","localStorage","token","dispatch","res","get","type","payload","data","err","register","formData","setLoading","config","headers","post","response","msg","login","fetch","method","body","JSON","stringify","json","statusText","logout","clearErrors","setloading"],"mappings":"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","sourcesContent":["import setAuthToken from \"../utils/setAuthToken\";\nimport axios from \"axios\";\n\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  CLEAR_ERRORS,\n  SET_LOADING\n} from \"./types\";\n\n// LOAD USER\nexport const loadUser = () => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  return async dispatch => {\n    try {\n      const res = await axios.get(\"http://localhost:5000/api/auth\");\n\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({ type: AUTH_ERROR });\n    }\n  };\n};\n\n// REGISTER USER\nexport const register = formData => async dispatch => {\n  try {\n    dispatch(setLoading());\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const res = await axios.post(\n      \"http://localhost:5000/api/users\",\n      formData,\n      config\n    );\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    dispatch({\n      type: REGISTER_FAIL,\n      payload: err.response.data.msg\n    });\n  }\n};\n\n// LOGIN USER\nexport const login = formData => async dispatch => {\n  try {\n    const res = await fetch(\"http://localhost:5000/api/auth\", {\n      method: \"POST\",\n      body: JSON.stringify(formData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: data\n    });\n    loadUser();\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: err.response.statusText\n    });\n  }\n};\n\n// LOGOUT USER\nexport const logout = dispatch => dispatch({ type: LOGOUT });\n\n// CLEAR ERRORS\nexport const clearErrors = dispatch => dispatch({ type: CLEAR_ERRORS });\n\n// SET LOADING\nexport const setloading = () => {\n  return { type: SET_LOADING };\n};\n"]},"metadata":{},"sourceType":"module"}