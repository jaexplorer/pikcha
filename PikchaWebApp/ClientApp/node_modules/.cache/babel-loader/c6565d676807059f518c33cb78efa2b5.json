{"ast":null,"code":"import setAuthToken from \"../utils/setAuthToken\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_ERRORS } from \"./types\"; // LOAD USER\n\nexport const loadUser = async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await fetch(\"http://localhost:5000/api/auth\");\n    const data = await res.json();\n    dispatch({\n      type: USER_LOADED,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // REGISTER USER\n\nexport const register = formData => async dispatch => {\n  try {\n    const res = await fetch(\"http://localhost:5000/api/users\", {\n      method: \"POST\",\n      body: JSON.stringify(formData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: data\n    });\n    loadUser();\n  } catch (err) {\n    dispatch({\n      type: REGISTER_FAIL,\n      payload: err.response.statusText\n    });\n    console.log(err);\n    console.log(err.response);\n  }\n}; // LOGIN USER\n\nexport const login = formData => async dispatch => {\n  try {\n    const res = await fetch(\"http://localhost:5000/api/auth\", {\n      method: \"POST\",\n      body: JSON.stringify(formData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: data\n    });\n    loadUser();\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: err.response.statusText\n    });\n  }\n}; // LOGOUT USER\n\nexport const logout = dispatch => dispatch({\n  type: LOGOUT\n}); // CLEAR ERRORS\n\nexport const clearErrors = dispatch => dispatch({\n  type: CLEAR_ERRORS\n});","map":{"version":3,"sources":["/Users/AndrewSabato/Desktop/Pikcha/Repo/PikchaWebApp/ClientApp/src/actions/auth.js"],"names":["setAuthToken","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_ERRORS","loadUser","dispatch","localStorage","token","res","fetch","data","json","type","payload","err","register","formData","method","body","JSON","stringify","headers","response","statusText","console","log","login","logout","clearErrors"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,uBAAzB;AAEA,SACEC,gBADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,UAJF,EAKEC,aALF,EAMEC,UANF,EAOEC,MAPF,EAQEC,YARF,QASO,SATP,C,CAWA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAMC,QAAN,IAAkB;AACxC,MAAIC,YAAY,CAACC,KAAjB,EAAwB;AACtBZ,IAAAA,YAAY,CAACW,YAAY,CAACC,KAAd,CAAZ;AACD;;AAED,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,gCAAD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAN,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAEd,WADC;AAEPe,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAID,GARD,CAQE,OAAOI,GAAP,EAAY;AACZT,IAAAA,QAAQ,CAAC;AAAEO,MAAAA,IAAI,EAAEb;AAAR,KAAD,CAAR;AACD;AACF,CAhBM,C,CAkBP;;AACA,OAAO,MAAMgB,QAAQ,GAAGC,QAAQ,IAAI,MAAMX,QAAN,IAAkB;AACpD,MAAI;AACF,UAAMG,GAAG,GAAG,MAAMC,KAAK,CAAC,iCAAD,EAAoC;AACzDQ,MAAAA,MAAM,EAAE,MADiD;AAEzDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAFmD;AAGzDK,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHgD,KAApC,CAAvB;AAOA,UAAMX,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAN,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAEhB,gBADC;AAEPiB,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAIAN,IAAAA,QAAQ;AACT,GAfD,CAeE,OAAOU,GAAP,EAAY;AACZT,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAEf,aADC;AAEPgB,MAAAA,OAAO,EAAEC,GAAG,CAACQ,QAAJ,CAAaC;AAFf,KAAD,CAAR;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAYX,GAAZ;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYX,GAAG,CAACQ,QAAhB;AACD;AACF,CAxBM,C,CA0BP;;AACA,OAAO,MAAMI,KAAK,GAAGV,QAAQ,IAAI,MAAMX,QAAN,IAAkB;AACjD,MAAI;AACF,UAAMG,GAAG,GAAG,MAAMC,KAAK,CAAC,gCAAD,EAAmC;AACxDQ,MAAAA,MAAM,EAAE,MADgD;AAExDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAFkD;AAGxDK,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAH+C,KAAnC,CAAvB;AAOA,UAAMX,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAN,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAEZ,aADC;AAEPa,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAIAN,IAAAA,QAAQ;AACT,GAfD,CAeE,OAAOU,GAAP,EAAY;AACZT,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAEX,UADC;AAEPY,MAAAA,OAAO,EAAEC,GAAG,CAACQ,QAAJ,CAAaC;AAFf,KAAD,CAAR;AAID;AACF,CAtBM,C,CAwBP;;AACA,OAAO,MAAMI,MAAM,GAAGtB,QAAQ,IAAIA,QAAQ,CAAC;AAAEO,EAAAA,IAAI,EAAEV;AAAR,CAAD,CAAnC,C,CAEP;;AACA,OAAO,MAAM0B,WAAW,GAAGvB,QAAQ,IAAIA,QAAQ,CAAC;AAAEO,EAAAA,IAAI,EAAET;AAAR,CAAD,CAAxC","sourcesContent":["import setAuthToken from \"../utils/setAuthToken\";\n\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  CLEAR_ERRORS\n} from \"./types\";\n\n// LOAD USER\nexport const loadUser = async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await fetch(\"http://localhost:5000/api/auth\");\n    const data = await res.json();\n\n    dispatch({\n      type: USER_LOADED,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({ type: AUTH_ERROR });\n  }\n};\n\n// REGISTER USER\nexport const register = formData => async dispatch => {\n  try {\n    const res = await fetch(\"http://localhost:5000/api/users\", {\n      method: \"POST\",\n      body: JSON.stringify(formData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: data\n    });\n    loadUser();\n  } catch (err) {\n    dispatch({\n      type: REGISTER_FAIL,\n      payload: err.response.statusText\n    });\n    console.log(err);\n    console.log(err.response);\n  }\n};\n\n// LOGIN USER\nexport const login = formData => async dispatch => {\n  try {\n    const res = await fetch(\"http://localhost:5000/api/auth\", {\n      method: \"POST\",\n      body: JSON.stringify(formData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: data\n    });\n    loadUser();\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: err.response.statusText\n    });\n  }\n};\n\n// LOGOUT USER\nexport const logout = dispatch => dispatch({ type: LOGOUT });\n\n// CLEAR ERRORS\nexport const clearErrors = dispatch => dispatch({ type: CLEAR_ERRORS });\n"]},"metadata":{},"sourceType":"module"}